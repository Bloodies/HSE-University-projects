--Заполнение-базы-данных---------------------------------------------------------------------------
-----Создание-таблицы-с-шефами---------------------------------------------------------------------
create table chefs                                                 --инициализация таблицы с шефами
( chef_id number not null,
  chef_name varchar2(50) not null,
  chef_birth_date date not null
);

create index ch_name         --индекс с именами, так как в будущем будем выбирать среди имен
  on chefs(chef_name);
  
create index ch_date         --индекс с днями рождений, так как в будущем будем искать даты
  on chefs(chef_birth_date);
  
--заполнение таблицы/базы данных-------------------------------
insert into chefs(chef_id, chef_name, chef_birth_date) values 
  (0,'Иванов Иван', to_date('25.01.1978', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values
  (1,'Данилов Данил', to_date('10.02.2003', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values
  (2,'Андреев Андрей', to_date('17.03.1982', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values 
  (3,'Павлов Павел', to_date('08.05.1978', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values
  (4,'Сергеев Сергей', to_date('09.07.1997', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values
  (5,'Дмитриев Дмитрий', to_date('21.09.2002', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values 
  (6,'Полинова Полина', to_date('10.02.2000', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values
  (7,'Паприкова Анастасия', to_date('06.10.2001', 'dd.mm.yyyy'));

insert into chefs(chef_id, chef_name, chef_birth_date) values
  (8,'Олег Григорьев', to_date('04.10.1990', 'dd.mm.yyyy'));
  
insert into chefs(chef_id, chef_name, chef_birth_date) values
  (9,'Славный Друже', to_date('04.10.1990', 'dd.mm.yyyy'));  
------------------------------------------------------------------------------------------------------
----Создание-таблицы-со-скиллами----------------------------------------------------------------------
create table cooking_skills                                        --инициализация таблицы со скиллами
( skill_id number(10) not null,
  skill_name varchar2(50) not null
);

create index skill_tag                                             --названия блюд
  on cooking_skills(skill_name);
  
--заполнение таблицы--------
/*
insert into cooking_skills
  (skill_id, skill_name) 
   values 
  (0,'Торты');

insert into cooking_skills
  (skill_id, skill_name) 
   values 
  (1,'Пирожные');

insert into cooking_skills
  (skill_id, skill_name) 
   values 
  (2,'Утка по пекински');

insert into cooking_skills
  (skill_id, skill_name)
   values 
  (3,'Суп');
*/
insert into cooking_skills
  (skill_id, skill_name) 
   values 
  (0,'Торты');

insert into cooking_skills
  (skill_id, skill_name) 
   values 
  (1,'Пирожные');

insert into cooking_skills
  (skill_id, skill_name) 
   values 
  (2,'Утка по пекински');

insert into cooking_skills
  (skill_id, skill_name)
   values 
  (3,'Суп');
  
insert into cooking_skills
  (skill_id, skill_name)
   values 
  (4,'Селёдка');
  
insert into cooking_skills
  (skill_id, skill_name)
   values 
  (5,'Чивапчичи');
  
insert into cooking_skills
  (skill_id, skill_name)
   values 
  (6,'Хлеб');
  
insert into cooking_skills
  (skill_id, skill_name)
   values 
  (7,'Суп');
  
insert into cooking_skills
  (skill_id, skill_name)
   values 
  (8,'Пельмени');
  
insert into cooking_skills
  (skill_id, skill_name)
   values 
  (9,'Торты');
-------------------------------------------------------------------------------------------------------
----Объединение-таблиц-в-одну--------------------------------------------------------------------------
/* рабочий вариант если нужно рспределить обязаннности на поваров 
   но не работает если добавлять поваров с уникальными умениями
create table chef_skill_links as                                   --инициализация объедененной таблицы
  select chef_id, chef_name, skill_name 
  from cooking_skills 
  inner join chefs 
  on skill_id = mod(chef_id, 4);                         
       --если блюд больше то 4 меняем на другую цифру
*/
create table chef_skill_links as                                   --инициализация объедененной таблицы
  select chef_id, chef_name, skill_name 
  from cooking_skills 
  inner join chefs 
  on skill_id = chef_id;

alter table chef_skill_links add skill_reach date; 
  update chef_skill_links 
  set skill_reach = TO_DATE('2014/07/22', 'yyyy/mm/dd');
-------------------------------------------------------------------------------------------------------
/*1) Напишите функцию, которая на вход будет получать два числа, и возвращать сумму этих чисел.*/
-------------------------------------------------------------------------------------------------------
create or  replace function 
 plus 
  (value1 IN number, value2 IN number)
  return number
  is
  begin
   return (value1 + value2);
end plus;
/

begin
 dbms_output.put_line(plus(5, 5));
end;
-------------------------------------------------------------------------------------------------------
/*2) Напишите функцию, которая будет принимать на вход одномерный массив с числами, 
и возвращать сумму чисел в массиве.*/
-------------------------------------------------------------------------------------------------------
declare
 type array_rec is record(val number);
 type n_array is table of array_rec index by pls_integer;
 arr n_array;
 idx int;
 summ int := 0;
begin
 arr(1).val:= -10;
 arr(2).val:= 20;
 arr(3).val:= 2;
 arr(4).val:= 10;
 arr(5).val:= 6;
 idx := arr.first;
 while (idx is not null) loop
  summ := summ + nvl(arr(idx).val, 0);          
  idx := arr.next(idx);
 end loop;
dbms_output.put_line(summ);
end;
-------------------------------------------------------------------------------------------------------
/*3) Напишите функцию, которая будет возвращать текущую дату и время в формате dd.mm.yyyy hh24:mi.*/
-------------------------------------------------------------------------------------------------------
create or replace function today
return string
is
begin
 return to_char (sysdate(), 'dd-mm-yyyy hh24:mi');
end today;
/

begin
 dbms_output.put_line(today);
end;
-------------------------------------------------------------------------------------------------------
/*4) Напишите функцию, которая на вход будет принимать два текстовых параметра, 
удалять из входных параметров все числа, 
и выдавать один текстовый параметр склеенный из обработанных входных параметров.*/
-------------------------------------------------------------------------------------------------------
create or replace function strings
(c1 string, c2 string) return string
is
 CL1 string(50);
 CL2 string(50);
 summa string(50);
begin
 CL1 := regexp_replace (c1,'[^[[:alpha:]]]*');
 CL2 := regexp_replace (c2,'[^[[:alpha:]]]*');
 summa := concat(CL1,CL2);
 return summa;
end strings;
/

begin
 dbms_output.put_line(strings('4епо','4ем'));
end;
-------------------------------------------------------------------------------------------------------
/*5) Написать функцию, которая вернет день рождения самого молодого повара. 
Использовать данные и таблицы из лабораторной работы №1.*/
-------------------------------------------------------------------------------------------------------
create or replace function young
return date is chef_date date;
begin
 SELECT chef_birth_date into chef_date  
 FROM chefs
  WHERE chef_birth_date in (select max(chef_birth_date) from chefs);
 return chef_date;
end;
/

begin
 dbms_output.put_line(young);
end;
-------------------------------------------------------------------------------------------------------
/*6) Написать функцию, которая по идентификатору повара вернёт ФИО повара. 
Использовать данные и таблицы из лабораторной работы №1.*/
-------------------------------------------------------------------------------------------------------
create or replace function chname
 (ch_id in number)
return string is name_ch string(50);
begin
 select chef_name into name_ch from chefs where chef_id = ch_id;
 return name_ch;
end;
/

begin
 dbms_output.put_line(chname(2));
end;
-------------------------------------------------------------------------------------------------------
/*7) Реализовать функцию получения n-го члена ряда Фибоначчи (и цикл и рекурсивно подойдет).*/
-------------------------------------------------------------------------------------------------------
create or replace function F(n integer)
return integer as
begin
 if n<=0 then return -1;
  elsif (n=1) or (n=2) then return 1;
  else return F(n-1)+F(n-2);
 end if;
end;
/

begin
 dbms_output.put_line(F(6));
end;
-------------------------------------------------------------------------------------------------------
/*8) Имеется строка, в которой находится символ вертикальной черты «|». 
Реализовать процедуру, которая эту строку будет делить на две части: до символа и после него, не включая сам символ. 
Результат должен возвращаться в параметрах. 
Предусмотреть корректную работу процедуры в случае отсутствия символа-разделителя (например, возвращать в обе части null).*/
-------------------------------------------------------------------------------------------------------
create or replace procedure Proc(str varchar2, s1 out varchar2, s2 out varchar2) is key integer;
begin
 key:=instr(str,'|');
 if key=0 then
  s1:=null;
  s2:=null;
 else
  s1:=substr(str,0,key-1);
  s2:=substr(str,key+1);
 end if;
end;
/

declare
 s1 varchar2(25);
 s2 varchar2(25);

begin
 Proc('тест|тестирование',s1,s2);
 dbms_output.put_line(s1 ||' '|| s2);
end;
-------------------------------------------------------------------------------------------------------
/*9) Реализовать функцию, возвращающую булев результат и определяющую, является ли переданная в нее строка палиндромом. 
Строка может содержать символы кириллицы и латиницы в любом регистре, пробелы.
Пример палиндрома: «А роза упала на лапу Азора».*/
-------------------------------------------------------------------------------------------------------
create or replace function Polynom(s varchar2) return boolean
is
s1 varchar2(200);
s2 varchar2(200):= replace(s,' ');
begin
 for i in reverse 1..length(s2) loop
  s1:= s1||substr(s2,i,1);
 end loop;
 return lower(s1) = lower(s2);
end;
/

declare
 answer varchar2(50);

begin
 case Polynom('А роза упала на лапу Азора')
  when true then answer:= 'Это палиндром';
  when false then answer:= 'Это не палиндром';
  else answer:= 'Что это? (программа не дала результата)';
 end case;
 dbms_output.put_line(answer);
end;
-------------------------------------------------------------------------------------------------------
/*10) Реализовать триггер, который не давал бы изменять скиллы поваров, если стаж их работы больше 5 лет. 
Использовать данные и таблицы из лабораторной работы №1.*/
-------------------------------------------------------------------------------------------------------
create or replace trigger blocker 
before update on chef_skill_links 
for each row 
when ((extract(year from current_date)-extract(year from old.skill_reach))>5) 
begin 
 RAISE_APPLICATION_ERROR(-20001,'Значение не может быть изменено, так как стаж работы превышает 5 лет'||chr(13)||chr(10)); 
end;
/
 
update chef_skill_links SET skill_name = 'ОБНОВЛЕНО' WHERE chef_id = 1; 
update chef_skill_links SET skill_name = 'ОБНОВЛЕНО' WHERE chef_id = 3; 
select * from chef_skill_links;
-------------------------------------------------------------------------------------------------------
/*11) Реализовать триггер, записывающие все изменения, происходящие с данными в таблице chefs. 
Создать таблицу изменений audit_ chefs, куда будет происходить логирование. 
Структуру продумать самим.
Использовать данные и таблицы из лабораторной работы №1.*/
-------------------------------------------------------------------------------------------------------
create table audit_chefs
( log_name varchar2(100),
  ch_id integer,
  ch_name varchar2(50),
  ch_birthdate date not null
);

create or replace trigger track_chef  
after insert or update or delete on chefs  
for each row  
begin  
 if inserting then insert into audit_chefs(log_name, ch_id, ch_name, ch_birthdate) values ('insert', :NEW.chef_id, :NEW.chef_name, :NEW.chef_birth_date); 
 elsif deleting then insert into audit_chefs(log_name, ch_id, ch_name, ch_birthdate) values ('delete', :OLD.chef_id, :OLD.chef_name, :OLD.chef_birth_date); 
 elsif updating then raise_application_error(-20502, 'мы еще не умеем менять'); 
 --если менять как надо (insert into audit_chefs(log_name, ch_id, ch_name, ch_birthdate) values ('update', chef_id, :NEW.chef_name, :NEW.chef_birth_date); ) то выскакивает ошибка что столбец не находится 
 else raise_application_error(-20503, 'низя'); 
end if; 
end track_chef;
 
 
insert into chefs(chef_id, chef_name, chef_birth_date) values (10,'Кто то', to_date('25.01.1978', 'dd.mm.yyyy')); 
insert into chefs(chef_id, chef_name, chef_birth_date) values (11,'Лень придумывать', to_date('10.02.1980', 'dd.mm.yyyy')); 
insert into chefs(chef_id, chef_name, chef_birth_date) values (12,'No name', to_date('01.01.1901', 'dd.mm.yyyy')); 
delete from chefs where chef_id = 1; 
update chefs 
set chef_name = 'Человек Павук' 
where chef_id = 11; 

select * from audit_chefs;

-------------------------------------------------------------------------------------------------------
/*12) Навесить на таблицу audit_chefs триггер, который бы запрещал удалять и изменять в ней записи. 
При попытке отключения данного триггера должно выводиться уведомление, что данный триггер отключать нельзя.*/
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------